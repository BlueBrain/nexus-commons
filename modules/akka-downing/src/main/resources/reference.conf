akka {
  cluster {
    #downing-provider-class = "ch.epfl.bluebrain.nexus.commons.downing.KeepOldestAkkaDowningProvider"
  }

  custom-downing {
    # The strategy named keep-oldest will down the part that does not contain the oldest member.
    # The oldest member is interesting because the active Cluster Singleton instance is running on the oldest member.
    keep-oldest {
      # Time margin after which shards or singletons that belonged to a downed/removed
      # partition are created in surviving partition. The purpose of this margin is that
      # in case of a network partition the persistent actors in the non-surviving partitions
      # must be stopped before corresponding persistent actors are started somewhere else.
      # This is useful if you implement downing strategies that handle network partitions,
      # e.g. by keeping the larger side of the partition and shutting down the smaller side.
      # Decision is taken by the strategy when there has been no membership or
      # reachability changes for this duration, i.e. the cluster state is stable.
      stable-after = 6s

      # Flag to decide whether or not the oldest node should be killed when left alone in a cluster.
      # If set to true and the oldest node has partitioned from all other nodes the oldest will down itself and keep all other nodes running
      down-if-alone = on

      # Time margin after which shards or singletons that belonged to a downed/removed
      # partition are created in surviving partition. The purpose of this margin is that
      # in case of a network partition the persistent actors in the non-surviving partitions
      # must be stopped before corresponding persistent actors are started somewhere else.
      # This is useful if you implement downing strategies that handle network partitions,
      # e.g. by keeping the larger side of the partition and shutting down the smaller side.
      # It will not add any extra safety for auto-down-unreachable-after, since that is not
      # handling network partitions.
      down-removal-margin = 6s

      # When reachability observations by the failure detector are changed the termination/survival decisions are deferred until there are no changes within the stable-after duration.
      # If this continues for too long it might be an indication of an unstable system/network and it could result in delayed or conflicting decisions on separate sides of a network partition.
      # As a precaution for that scenario all nodes are downed if no decision is made within stable-after + down-all-when-unstable from the first unreachability event. The measurement is reset if all unreachable have been healed, downed or removed, or if there are no changes within stable-after * 2.
      # This value cannot be bigger than 2 * stable-after
      # By default this is set to a value 3/4 of stable-after
      # down-all-when-unstable = 4500 millis
    }
  }
}